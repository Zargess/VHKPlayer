using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
// <copyright file="PathHandlerTest.SplitPath.g.cs">Copyright ©  2014</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;

namespace Zargess.VHKPlayer.UtilFunctions {
    public partial class PathHandlerTest {
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath158() {
            string[] ss;
            ss = this.SplitPath("\0");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(0, ss.Length);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath959() {
            string[] ss;
            ss = this.SplitPath("");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(0, ss.Length);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath221() {
            string[] ss;
            ss = this.SplitPath("\\");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(2, ss.Length);
            Assert.AreEqual<string>("", ss[0]);
            Assert.AreEqual<string>("", ss[1]);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath671() {
            string[] ss;
            ss = this.SplitPath("/");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(2, ss.Length);
            Assert.AreEqual<string>("", ss[0]);
            Assert.AreEqual<string>("", ss[1]);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath382() {
            string[] ss;
            ss = this.SplitPath("\\\\");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(3, ss.Length);
            Assert.AreEqual<string>("", ss[0]);
            Assert.AreEqual<string>("", ss[1]);
            Assert.AreEqual<string>("", ss[2]);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath175() {
            string[] ss;
            ss = this.SplitPath("\0/");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(2, ss.Length);
            Assert.AreEqual<string>("\0", ss[0]);
            Assert.AreEqual<string>("", ss[1]);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath2() {
            string[] ss;
            ss = this.SplitPath("\0\\\0");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(2, ss.Length);
            Assert.AreEqual<string>("\0", ss[0]);
            Assert.AreEqual<string>("\0", ss[1]);
        }
        [TestMethod]
        [PexGeneratedBy(typeof(PathHandlerTest))]
        public void SplitPath790() {
            string[] ss;
            ss = this.SplitPath("\0\\\0\\");
            Assert.IsNotNull((object)ss);
            Assert.AreEqual<int>(3, ss.Length);
            Assert.AreEqual<string>("\0", ss[0]);
            Assert.AreEqual<string>("\0", ss[1]);
            Assert.AreEqual<string>("", ss[2]);
        }
    }
}
