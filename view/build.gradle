plugins {
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "com.moowork.node" version "1.3.1"
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/client/dist/client"
        }
    }
}

dependencies {
    compile project(":core")
}

javafx {
    version = "12"
    modules = ['javafx.web']
}

mainClassName = 'com.vhkplayer.main.Main'

def clientLocation = 'src/main/client'

// Set up node and npm version for module
node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */
    // Version of node to use.
    version = '10.16.3'
    // Version of npm to use.
    npmVersion = '6.10.3'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${clientLocation}")
}

// Change detection for our npm build
npm_run_build {
    // make sure the build task is executed only when appropriate files change
    inputs.files fileTree("${clientLocation}/src")

    // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
    // though 'package.json' and 'package-lock.json' should be enough anyway
    inputs.file "${clientLocation}/package.json"
    inputs.file "${clientLocation}/package-lock.json"

    outputs.dir 'build'
}

assemble.dependsOn(npm_run_build)

jar {
    manifest {
        attributes('Main-Class': 'com.vhkplayer.main.Main')
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

clean {
    delete "${clientLocation}/dist"
    delete "${clientLocation}/node_modules"
    delete "out"
}