<metro:MetroWindow x:Class="Zargess.VHKPlayer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Zargess.VHKPlayer"
        xmlns:converters="clr-namespace:Zargess.VHKPlayer.Converters"
        xmlns:selectors="clr-namespace:Zargess.VHKPlayer.Selectors"
        xmlns:user="clr-namespace:Zargess.VHKPlayer.Controls"
        xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525" Name="MView">

    <Window.Resources>
        <converters:MusicVisibilityConverter x:Key="MusicVisibilityConverter" />
        <converters:PlayerOnlyVisibilityConverter x:Key="PlayerOnlyVisibilityConverter" />
        <converters:FindCommandParameterConverter x:Key="ParameterConverter" />
        <converters:PlayerVideoVisibilityConverter x:Key="PlayerVidVisibility" />
        <converters:PlayerStatVisibilityConverter x:Key="PlayerStatVisibility" />

        <Style x:Key="MusicOnlyVisibilityStyle" TargetType="ListBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Visibility" Value="{Binding Converter={StaticResource MusicVisibilityConverter}}" />
        </Style>

        <Style x:Key="PlayerVidVisibilityStyle" TargetType="ListBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Visibility" Value="{Binding Converter={StaticResource PlayerVidVisibility}}" />
        </Style>

        <Style x:Key="PlayerStatVisibilityStyle" TargetType="ListBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Visibility" Value="{Binding Converter={StaticResource PlayerStatVisibility}}" />
        </Style>

        <Style x:Key="GeneralVisibilityStyle" TargetType="ListBoxItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        </Style>

        <DataTemplate x:Key="GeneralItemTemplate">
            <ContentControl>
                <i:Interaction.Triggers>
                    <i:EventTrigger SourceObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" 
                                                EventName="PreviewMouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding DataContext.PlayablePressed, ElementName=MView}">
                            <i:InvokeCommandAction.CommandParameter>
                                <MultiBinding Converter="{StaticResource ParameterConverter}">
                                    <Binding />
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}" Path="Name"/>
                                </MultiBinding>
                            </i:InvokeCommandAction.CommandParameter>
                        </i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <StackPanel>
                    <Label HorizontalAlignment="Stretch" FontSize="12" Height="30" Margin="-4,-1,-4,-1" Content="{Binding}"/>
                </StackPanel>
            </ContentControl>
        </DataTemplate>

        <selectors:ListboxVisibilityStyleSelector x:Key="VisibilitySelector" MusicTemplate="{StaticResource MusicOnlyVisibilityStyle}" GeneralPlayerTemplate="{StaticResource PlayerVidVisibilityStyle}" GeneralTemplate="{StaticResource GeneralVisibilityStyle}" />

        <DataTemplate x:Key="TabName" DataType="{x:Type TabItem}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Name}" FontSize="13" />
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="TabContent" DataType="{x:Type TabItem}">
            <DockPanel>
                <ListBox Name="Music" ItemsSource="{Binding Content}" HorizontalAlignment="Stretch" ItemContainerStyle="{StaticResource MusicOnlyVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}"/>
            </DockPanel>
        </DataTemplate>

        <Style x:Key="TabControlContent" TargetType="{x:Type TabControl}">
            <Setter Property="FontSize" Value="12" />
            <Setter Property="ItemTemplate" Value="{StaticResource TabName}" />
            <Setter Property="ContentTemplate" Value="{StaticResource TabContent}" />
        </Style>
        <Style x:Key="IldStyle" TargetType="{x:Type metro:DropDownButton}">
            <Setter Property="MinHeight" Value="26"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}"/>
            <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BlackColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type metro:DropDownButton}">
                        <Border x:Name="PART_Border" BorderBrush="{DynamicResource BlackColorBrush}" BorderThickness="1" d:IsHidden="True">
                            <Button x:Name="PART_Button" CommandTarget="{TemplateBinding CommandTarget}" CommandParameter="{TemplateBinding CommandParameter}" Command="{TemplateBinding Command}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Button.ContextMenu>
                                    <ContextMenu x:Name="PART_Menu" DisplayMemberPath="{TemplateBinding DisplayMemberPath}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemStringFormat="{TemplateBinding ItemStringFormat}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" MinWidth="{TemplateBinding ActualWidth}" StaysOpen="False"/>
                                </Button.ContextMenu>
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Background" Value="{DynamicResource WhiteColorBrush}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource BlackColorBrush}"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border x:Name="Border" BorderBrush="{DynamicResource WhiteColorBrush}" BorderThickness="0" Background="{DynamicResource WhiteColorBrush}" CornerRadius="0">
                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" Margin="2" RecognizesAccessKey="True" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                            <Setter Property="BorderBrush" TargetName="Border" Value="Transparent"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush8}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush6}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush10}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.BasedOn>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                                <Setter Property="Padding" Value="2"/>
                                                <Setter Property="BorderThickness" Value="1"/>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="BorderBrush" Value="Transparent"/>
                                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                                                    <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                                                    <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                                                    <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Style.BasedOn>
                                    </Style>
                                </Button.Style>
                                <StackPanel HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" Orientation="Horizontal" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ContentPresenter Content="{TemplateBinding Icon}" RecognizesAccessKey="True"/>
                                    <ContentControl x:Name="PART_ButtonContent" ContentTemplate="{TemplateBinding ItemTemplate}" Content="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ContentStringFormat="{TemplateBinding ItemStringFormat}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" MinWidth="20" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </StackPanel>
                            </Button>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" SourceName="PART_Button" Value="True">
                                <Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource AccentColorBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type metro:DropDownButton}">
                                <Border x:Name="PART_Border" BorderBrush="{DynamicResource BlackColorBrush}" BorderThickness="1">
                                    <Button x:Name="PART_Button" CommandTarget="{TemplateBinding CommandTarget}" CommandParameter="{TemplateBinding CommandParameter}" Command="{TemplateBinding Command}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Button.ContextMenu>
                                            <ContextMenu x:Name="PART_Menu" DisplayMemberPath="{TemplateBinding DisplayMemberPath}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemStringFormat="{TemplateBinding ItemStringFormat}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" MinWidth="{TemplateBinding ActualWidth}" StaysOpen="False"/>
                                        </Button.ContextMenu>
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="Background" Value="{DynamicResource WhiteColorBrush}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource BlackColorBrush}"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Button}">
                                                            <Border x:Name="Border" BorderBrush="{DynamicResource WhiteColorBrush}" BorderThickness="0" Background="{DynamicResource WhiteColorBrush}" CornerRadius="0">
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" Margin="2" RecognizesAccessKey="True" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsKeyboardFocused" Value="True">
                                                                    <Setter Property="BorderBrush" TargetName="Border" Value="Transparent"/>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush8}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush6}"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource GrayBrush10}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.BasedOn>
                                                    <Style TargetType="{x:Type Button}">
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                                                        <Setter Property="Padding" Value="2"/>
                                                        <Setter Property="BorderThickness" Value="1"/>
                                                        <Setter Property="Background" Value="Transparent"/>
                                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsPressed" Value="True">
                                                                            <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                                                            <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </Style.BasedOn>
                                            </Style>
                                        </Button.Style>
                                        <Grid HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Content="{TemplateBinding Icon}" RecognizesAccessKey="True"/>
                                            <ContentControl VerticalAlignment="Top" HorizontalAlignment="Left" x:Name="PART_ButtonContent" ContentTemplate="{TemplateBinding ItemTemplate}" Content="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ContentStringFormat="{TemplateBinding ItemStringFormat}" VerticalContentAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            <Rectangle x:Name="PART_Rectangle" Visibility="Collapsed" Fill="{DynamicResource BlackColorBrush}" HorizontalAlignment="Center" Height="6" Margin="0,0,0,3" VerticalAlignment="Center" Width="10">
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush Stretch="Fill">
                                                        <VisualBrush.Visual>
                                                            <Canvas Clip="F1M0,0L48,0 48,48 0,48 0,0" Height="18" UseLayoutRounding="False" Width="18">
                                                                <Path Data="F1M23.9063,25L25.9063,23 32.9063,15.75 32.9063,22.25 23.9062,31.75 14.9063,22.25 14.9063,15.75 21.9063,23 23.9063,25z" Fill="{DynamicResource BlackColorBrush}" Height="16" Canvas.Left="14.9063" Stretch="Fill" Canvas.Top="15.75" Width="18"/>
                                                            </Canvas>
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Rectangle.OpacityMask>
                                            </Rectangle>
                                        </Grid>
                                    </Button>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsFocused" SourceName="PART_Button" Value="True">
                                        <Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource AccentColorBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Fill" TargetName="PART_Rectangle" Value="{DynamicResource AccentColorBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <metro:MetroWindow.RightWindowCommands>
        <metro:WindowCommands>
            <Button Content="settings" Command="{Binding Test}"/>
            <metro:DropDownButton Background="Green" Foreground="Green" ItemsSource="{Binding NotifiContainer.Content}"/>
        </metro:WindowCommands>
    </metro:MetroWindow.RightWindowCommands>

    <Grid>
        <DockPanel>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="256*"/>
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition Width="256*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="100*"/>
                    <RowDefinition Height="5"/>
                    <RowDefinition Height="50*"/>
                </Grid.RowDefinitions>

                <GridSplitter IsEnabled="False" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <GridSplitter IsEnabled="False" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <GridSplitter IsEnabled="False" Grid.Row="1" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                <GridSplitter IsEnabled="False" Grid.Row="2" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

                <Grid Grid.Row="2" Grid.Column="0">
                    <!--<metro:DropDownButton HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding NotifiContainer.Content}" Icon="{x:Null}" Content="{Binding NotifiContainer.Content.Count}" Style="{DynamicResource IldStyle}" />-->
                    <user:NotificationControl />
                </Grid>

                <Grid Grid.Row="0" Grid.Column="0">
                    <TabControl Name="Music" Style="{StaticResource TabControlContent}" ItemsSource="{Binding MusicContainer.Content}"/>
                </Grid>

                <Grid Grid.Row="0" Grid.Column="2">
                    <TabControl>
                        <TabItem Name="DuringMatch" Header="Under Kamp" metro:ControlsHelper.HeaderFontSize="18">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="256*"/>
                                    <ColumnDefinition Width="5"/>
                                    <ColumnDefinition Width="180*"/>
                                </Grid.ColumnDefinitions>

                                <GridSplitter IsEnabled="False" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />

                                <Grid Grid.Column="0">
                                    <TabControl>
                                        <TabItem Header="Spiller" metro:ControlsHelper.HeaderFontSize="16">
                                            <ListBox Name="PlayerPicture" ItemsSource="{Binding PlayerContainer.Content}" ItemContainerStyle="{StaticResource GeneralVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}" />
                                        </TabItem>

                                        <TabItem Header="SpillerVideo" metro:ControlsHelper.HeaderFontSize="16">
                                            <ListBox Name="PlayerVideo" ItemsSource="{Binding PlayerContainer.Content}" ItemContainerStyle="{StaticResource PlayerVidVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}" />
                                        </TabItem>

                                        <TabItem Header="SpillerVideoStat" metro:ControlsHelper.HeaderFontSize="16">
                                            <ListBox Name="PlayerVideoStat" ItemsSource="{Binding PlayerContainer.Content}" ItemContainerStyle="{StaticResource PlayerStatVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}" />
                                        </TabItem>

                                    </TabControl>
                                </Grid>

                                <ListBox Name="Video" Grid.Column="2" ItemsSource="{Binding CardContainer.Content}" ItemContainerStyle="{StaticResource GeneralVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}"/>
                            </Grid>
                        </TabItem>

                        <TabItem Header="PlayLister" metro:ControlsHelper.HeaderFontSize="18">
                            <ListBox Name="PlayList" ItemsSource="{Binding PlayListContainer.Content}" ItemContainerStyle="{StaticResource GeneralVisibilityStyle}" ItemTemplate="{StaticResource GeneralItemTemplate}"/>
                        </TabItem>
                    </TabControl>
                </Grid>
            </Grid>
        </DockPanel>
    </Grid>
</metro:MetroWindow>